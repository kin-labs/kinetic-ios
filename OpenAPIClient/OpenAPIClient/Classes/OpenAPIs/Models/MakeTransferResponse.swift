//
// MakeTransferResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MakeTransferResponse: Codable, JSONEncodable, Hashable {

    public var amount: Double
    public var destination: String
    public var errors: AnyCodable
    public var feePayer: String
    public var mint: String
    public var signature: String
    public var solanaStart: Date
    public var solanaEnd: Date
    public var source: String
    public var status: AnyCodable

    public init(amount: Double, destination: String, errors: AnyCodable, feePayer: String, mint: String, signature: String, solanaStart: Date, solanaEnd: Date, source: String, status: AnyCodable) {
        self.amount = amount
        self.destination = destination
        self.errors = errors
        self.feePayer = feePayer
        self.mint = mint
        self.signature = signature
        self.solanaStart = solanaStart
        self.solanaEnd = solanaEnd
        self.source = source
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case destination
        case errors
        case feePayer
        case mint
        case signature
        case solanaStart
        case solanaEnd
        case source
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(amount, forKey: .amount)
        try container.encode(destination, forKey: .destination)
        try container.encode(errors, forKey: .errors)
        try container.encode(feePayer, forKey: .feePayer)
        try container.encode(mint, forKey: .mint)
        try container.encode(signature, forKey: .signature)
        try container.encode(solanaStart, forKey: .solanaStart)
        try container.encode(solanaEnd, forKey: .solanaEnd)
        try container.encode(source, forKey: .source)
        try container.encode(status, forKey: .status)
    }
}

