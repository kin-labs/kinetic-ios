//
// AppTransaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AppTransaction: Codable, JSONEncodable, Hashable {

    public var id: String
    public var createdAt: Date
    public var updatedAt: Date
    public var amount: Double
    public var destination: String
    public var errors: [String]
    public var feePayer: String
    public var mint: String
    public var signature: String
    public var solanaStart: Date
    public var solanaEnd: Date
    public var source: String
    public var status: AnyCodable
    public var webhookEventStart: Date
    public var webhookEventEnd: Date
    public var webhookVerifyStart: Date
    public var webhookVerifyEnd: Date

    public init(id: String, createdAt: Date, updatedAt: Date, amount: Double, destination: String, errors: [String], feePayer: String, mint: String, signature: String, solanaStart: Date, solanaEnd: Date, source: String, status: AnyCodable, webhookEventStart: Date, webhookEventEnd: Date, webhookVerifyStart: Date, webhookVerifyEnd: Date) {
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.amount = amount
        self.destination = destination
        self.errors = errors
        self.feePayer = feePayer
        self.mint = mint
        self.signature = signature
        self.solanaStart = solanaStart
        self.solanaEnd = solanaEnd
        self.source = source
        self.status = status
        self.webhookEventStart = webhookEventStart
        self.webhookEventEnd = webhookEventEnd
        self.webhookVerifyStart = webhookVerifyStart
        self.webhookVerifyEnd = webhookVerifyEnd
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdAt
        case updatedAt
        case amount
        case destination
        case errors
        case feePayer
        case mint
        case signature
        case solanaStart
        case solanaEnd
        case source
        case status
        case webhookEventStart
        case webhookEventEnd
        case webhookVerifyStart
        case webhookVerifyEnd
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(amount, forKey: .amount)
        try container.encode(destination, forKey: .destination)
        try container.encode(errors, forKey: .errors)
        try container.encode(feePayer, forKey: .feePayer)
        try container.encode(mint, forKey: .mint)
        try container.encode(signature, forKey: .signature)
        try container.encode(solanaStart, forKey: .solanaStart)
        try container.encode(solanaEnd, forKey: .solanaEnd)
        try container.encode(source, forKey: .source)
        try container.encode(status, forKey: .status)
        try container.encode(webhookEventStart, forKey: .webhookEventStart)
        try container.encode(webhookEventEnd, forKey: .webhookEventEnd)
        try container.encode(webhookVerifyStart, forKey: .webhookVerifyStart)
        try container.encode(webhookVerifyEnd, forKey: .webhookVerifyEnd)
    }
}

