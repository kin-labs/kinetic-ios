//
// ConfirmedTransactionMeta.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ConfirmedTransactionMeta: Codable, JSONEncodable, Hashable {

    public var fee: Int?
    public var innerInstructions: [CompiledInnerInstruction]?
    public var preBalances: [Int]?
    public var postBalances: [Int]
    public var logMessages: [String]?
    public var preTokenBalances: [TokenBalance]?
    public var postTokenBalances: [TokenBalance]?
    public var err: AnyCodable?

    public init(fee: Int? = nil, innerInstructions: [CompiledInnerInstruction]? = nil, preBalances: [Int]? = nil, postBalances: [Int], logMessages: [String]? = nil, preTokenBalances: [TokenBalance]? = nil, postTokenBalances: [TokenBalance]? = nil, err: AnyCodable? = nil) {
        self.fee = fee
        self.innerInstructions = innerInstructions
        self.preBalances = preBalances
        self.postBalances = postBalances
        self.logMessages = logMessages
        self.preTokenBalances = preTokenBalances
        self.postTokenBalances = postTokenBalances
        self.err = err
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fee
        case innerInstructions
        case preBalances
        case postBalances
        case logMessages
        case preTokenBalances
        case postTokenBalances
        case err
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fee, forKey: .fee)
        try container.encodeIfPresent(innerInstructions, forKey: .innerInstructions)
        try container.encodeIfPresent(preBalances, forKey: .preBalances)
        try container.encode(postBalances, forKey: .postBalances)
        try container.encodeIfPresent(logMessages, forKey: .logMessages)
        try container.encodeIfPresent(preTokenBalances, forKey: .preTokenBalances)
        try container.encodeIfPresent(postTokenBalances, forKey: .postTokenBalances)
        try container.encodeIfPresent(err, forKey: .err)
    }
}

