//
// TransactionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TransactionAPI {

    /**

     - parameter environment: (path)  
     - parameter index: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: LatestBlockhashResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getLatestBlockhash(environment: String, index: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> LatestBlockhashResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = getLatestBlockhashWithRequestBuilder(environment: environment, index: index).execute(apiResponseQueue) { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /api/transaction/latest-blockhash/{environment}/{index}
     - parameter environment: (path)  
     - parameter index: (path)  
     - returns: RequestBuilder<LatestBlockhashResponse> 
     */
    open class func getLatestBlockhashWithRequestBuilder(environment: String, index: Int) -> RequestBuilder<LatestBlockhashResponse> {
        var localVariablePath = "/api/transaction/latest-blockhash/{environment}/{index}"
        let environmentPreEscape = "\(APIHelper.mapValueToPathItem(environment))"
        let environmentPostEscape = environmentPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{environment}", with: environmentPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LatestBlockhashResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter environment: (path)  
     - parameter index: (path)  
     - parameter dataLength: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MinimumRentExemptionBalanceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMinimumRentExemptionBalance(environment: String, index: Int, dataLength: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MinimumRentExemptionBalanceResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = getMinimumRentExemptionBalanceWithRequestBuilder(environment: environment, index: index, dataLength: dataLength).execute(apiResponseQueue) { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /api/transaction/minimum-rent-exemption-balance/{environment}/{index}
     - parameter environment: (path)  
     - parameter index: (path)  
     - parameter dataLength: (query)  
     - returns: RequestBuilder<MinimumRentExemptionBalanceResponse> 
     */
    open class func getMinimumRentExemptionBalanceWithRequestBuilder(environment: String, index: Int, dataLength: Int) -> RequestBuilder<MinimumRentExemptionBalanceResponse> {
        var localVariablePath = "/api/transaction/minimum-rent-exemption-balance/{environment}/{index}"
        let environmentPreEscape = "\(APIHelper.mapValueToPathItem(environment))"
        let environmentPostEscape = environmentPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{environment}", with: environmentPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "dataLength": dataLength.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MinimumRentExemptionBalanceResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter makeTransferRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AppTransaction
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func makeTransfer(makeTransferRequest: MakeTransferRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> AppTransaction {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = makeTransferWithRequestBuilder(makeTransferRequest: makeTransferRequest).execute(apiResponseQueue) { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - POST /api/transaction/make-transfer
     - parameter makeTransferRequest: (body)  
     - returns: RequestBuilder<AppTransaction> 
     */
    open class func makeTransferWithRequestBuilder(makeTransferRequest: MakeTransferRequest) -> RequestBuilder<AppTransaction> {
        let localVariablePath = "/api/transaction/make-transfer"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: makeTransferRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppTransaction>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
