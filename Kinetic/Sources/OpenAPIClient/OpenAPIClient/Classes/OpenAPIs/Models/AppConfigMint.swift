//
// AppConfigMint.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AppConfigMint: Codable, JSONEncodable, Hashable {

    public var airdrop: Bool
    public var airdropAmount: Int
    public var airdropMax: Int
    public var decimals: Int
    public var feePayer: String
    public var logoUrl: String
    public var name: String
    public var programId: String
    public var publicKey: String
    public var symbol: String

    public init(airdrop: Bool, airdropAmount: Int, airdropMax: Int, decimals: Int, feePayer: String, logoUrl: String, name: String, programId: String, publicKey: String, symbol: String) {
        self.airdrop = airdrop
        self.airdropAmount = airdropAmount
        self.airdropMax = airdropMax
        self.decimals = decimals
        self.feePayer = feePayer
        self.logoUrl = logoUrl
        self.name = name
        self.programId = programId
        self.publicKey = publicKey
        self.symbol = symbol
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case airdrop
        case airdropAmount
        case airdropMax
        case decimals
        case feePayer
        case logoUrl
        case name
        case programId
        case publicKey
        case symbol
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(airdrop, forKey: .airdrop)
        try container.encode(airdropAmount, forKey: .airdropAmount)
        try container.encode(airdropMax, forKey: .airdropMax)
        try container.encode(decimals, forKey: .decimals)
        try container.encode(feePayer, forKey: .feePayer)
        try container.encode(logoUrl, forKey: .logoUrl)
        try container.encode(name, forKey: .name)
        try container.encode(programId, forKey: .programId)
        try container.encode(publicKey, forKey: .publicKey)
        try container.encode(symbol, forKey: .symbol)
    }
}

